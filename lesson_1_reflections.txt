How did viewing a diff between two versions of a file help you see the bug that
was introduced?

  It was really useful to me, because I visually managed to see the differences
  between the two version. With the diff command I noticed through the '+' or '-'
  signs that there was a mistake in a specific line. I could focus on that line
  and detect the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

  Maybe it can be useful to have the opportunity to review previous versions in
  order to detect new bugs or to verify the progress of the development.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

  Of course the best pro consists in having the opportunity to check the progress
  of the project in a more logical way instead of the naive way based on time.
  The con consists in the bad manner of forgetting when is better to do the commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  Because it gives the opportunity to manage a big project based on multiple files:
  a lot of projects need many files in order to compile and give a functionality.

How can you use the commands git log and git diff to view the history of files?

  Enter the right repository. Type 'git log' in order to the history of the repository.
  Then type 'git diff 1 2' to see the adds or removes. Pay attention on the right
  commits, which is the previous one and the current one?

How might using version control make you more confident to make changes that
could break something?

  Because now I am sure that I can roll back easily to find where and how I
  introduced a bug.

Now that you have your workspace set up, what do you want to try using Git for?

Trying to change my code and detect some keywords trough all my commits.
